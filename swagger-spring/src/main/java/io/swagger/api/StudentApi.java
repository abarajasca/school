/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.62).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Student;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-09-25T21:17:08.221487552Z[GMT]")
@Validated
public interface StudentApi {

    @Operation(summary = "Get all students", description = "Multiple status values can be provided with comma separated strings", security = {
        @SecurityRequirement(name = "course_auth", scopes = {
            "write:pets",
"read:pets"        })    }, tags={ "Student" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Student.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid status value") })
    @RequestMapping(value = "/student/all",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Student>> allStudents();


    @Operation(summary = "Get all student in a Course", description = "Returns all students in a course", security = {
        @SecurityRequirement(name = "api_key"),
@SecurityRequirement(name = "course_auth", scopes = {
            "write:pets",
"read:pets"        })    }, tags={ "Student" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Student.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Course not found") })
    @RequestMapping(value = "/student/search-by-course/{idCourse}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Student>> getStudentByCourseIdStudent(@Parameter(in = ParameterIn.PATH, description = "ID of course to return", required=true, schema=@Schema()) @PathVariable("idCourse") Long idCourse
);


    @Operation(summary = "Search student by Id", description = "Returns a single student", security = {
        @SecurityRequirement(name = "api_key"),
@SecurityRequirement(name = "course_auth", scopes = {
            "write:pets",
"read:pets"        })    }, tags={ "Student" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Student.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Course not found") })
    @RequestMapping(value = "/student/search/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Student> getStudentById(@Parameter(in = ParameterIn.PATH, description = "ID of student to return", required=true, schema=@Schema()) @PathVariable("id") Long id
);


    @Operation(summary = "Add a Student", description = "Add a student", security = {
        @SecurityRequirement(name = "course_auth", scopes = {
            "write:pets",
"read:pets"        })    }, tags={ "Student" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Student.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "422", description = "Validation exception") })
    @RequestMapping(value = "/student/create",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Student> studentCreate(@Parameter(in = ParameterIn.DEFAULT, description = "Create a new student", required=true, schema=@Schema()) @Valid @RequestBody Student body
);

}

